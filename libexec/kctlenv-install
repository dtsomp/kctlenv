#!/usr/bin/env bash
set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${KCTLENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine KCTLENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine KCTLENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  KCTLENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n "${KCTLENV_ROOT}" ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine KCTLENV_ROOT";
else
  KCTLENV_ROOT="${KCTLENV_ROOT%/}";
fi;
export KCTLENV_ROOT;

if [ -n "${KCTLENV_HELPERS:-""}" ]; then
  log 'debug' 'KCTLENV_HELPERS is set, not sourcing helpers again';
else
  [ "${KCTLENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${KCTLENV_ROOT}/lib/helpers.sh";
  if source "${KCTLENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${KCTLENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${KCTLENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${KCTLENV_ROOT}/${dir}', not adding it again";;
    *)
      log 'debug' "\$PATH does not contain '${KCTLENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${KCTLENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -gt 1 ] && log 'error' 'usage: kctlenv install [<version>]';

declare requested="${1:-""}";

log debug "Resolving version with: kctlenv-resolve-version ${requested}";
declare resolved;
resolved="$(kctlenv-resolve-version ${requested})" || log 'error' "Failed to resolve ${requested} version";

declare version="${resolved%%\:*}";
declare regex="${resolved##*\:}";

[ -n "${version}" ] || log 'error' 'Version is not specified. This should not be possible as we default to latest';

log 'debug' "Processing install for version ${version}, using regex ${regex}";

#remote_version="$(kctlenv-list-remote | grep -e "${regex}" | head -n 1)";
#[ -n "${remote_version}" ] && version="${remote_version}" || log 'error' "No versions matching '${requested:-$version}' found in remote";

dst_path="${KCTLENV_CONFIG_DIR}/versions/${version}";
if [ -f "${dst_path}/kubectl" ]; then
  echo "Kubectl v${version} is already installed";
  exit 0;
fi;

case "$(uname -s)" in
  Darwin*)
    kernel="darwin";
    ;;
  MINGW64*)
    kernel="windows";
    ;;
  MSYSNT*)
    kernel="windows";
    ;;
  CYGWINNT*)
    kernel="windows";
    ;;
  FreeBSD*)
    kernel="freebsd";
    ;;
  *)
    kernel="linux";
    ;;
esac;

# Add support of ARM64 for Linux & Apple Silicon
case "$(uname -m)" in
  aarch64* | arm64*)
    case "${kernel}" in
      "linux")
        # There is no arm64 support for versions:
        # < 0.11.15
        # >= 0.12.0, < 0.12.30
        # >= 0.13.0, < 0.13.5
        if [[ "${version}" =~ 0\.(([0-9]|10))\.\d* ||
              "${version}" =~ 0\.11\.(([0-9]|1[0-4]))$ ||
              "${version}" =~ 0\.12\.(([0-9]|[1-2][0-9]))$ ||
              "${version}" =~ 0\.13\.[0-4]$
        ]]; then
          KCTLENV_ARCH="${KCTLENV_ARCH:-amd64}";
        else
          KCTLENV_ARCH="${KCTLENV_ARCH:-arm64}";
        fi;
      ;;
      "darwin")
        #Â No Apple Silicon builds before 1.0.2
        if [[ "${version}" =~ 0\..+$ || "${version}" =~ 1\.0\.0|1$
        ]]; then
          KCTLENV_ARCH="${KCTLENV_ARCH:-amd64}";
        else
          KCTLENV_ARCH="${KCTLENV_ARCH:-arm64}";
        fi;
      ;;
    esac;
    ;;
  *)
    KCTLENV_ARCH="${KCTLENV_ARCH:-amd64}";
    ;;
esac;

os="${kernel}_${KCTLENV_ARCH}"

keybase_bin="$(command -v keybase 2>/dev/null)";
shasum_bin="$(command -v shasum 2>/dev/null)";
sha256sum_bin="$(command -v sha256sum 2>/dev/null)";

KCTLENV_REMOTE="${KCTLENV_REMOTE:-https://dl.k8s.io/release}";
version_url="${KCTLENV_REMOTE}/v${version}/bin/${kernel}/${KCTLENV_ARCH}/kubectl";
shasum_url="${version_url}.sha256"

shasums_name="kubectl.sha256";
shasums_signing_key_postfix=".72D7468F";
shasums_sig="${shasums_name}${shasums_signing_key_postfix}.sig";

log 'info' "Installing Kubectl v${version}";

# Create a local temporary directory for downloads
tmpdir_arg="-t";

if mktemp --help 2>&1 | grep -- '--tmpdir' >/dev/null; then
  tmpdir_arg="--tmpdir";
fi;

download_tmp="$(mktemp -d ${tmpdir_arg} kctlenv_download.XXXXXX)" || log 'error' "Unable to create temporary download directory (mktemp -d ${tmpdir_arg} kctlenv_download.XXXXXX). Working Directory is: $(pwd)";

# Clean it up in case of error
trap "rm -rf ${download_tmp}" EXIT;

declare curl_progress="";
case "${KCTLENV_CURL_OUTPUT:-2}" in
  '2')
    log 'debug' 'Setting curl progress bar with "-#"';
    curl_progress="-#";
    ;;
  '1')
    log 'debug' 'Using default curl output';
    curl_progress="";
    ;;
  '0')
    log 'debug' 'Running curl silently with "-s"';
    curl_progress="-s";
    ;;
  *)
    log 'error' 'KCTLENV_CURL_OUTPUT specified, but not with a supported value ([0,1,2])';
    ;;
esac;

log 'info' "Downloading release tarball from ${version_url}";
curlw ${curl_progress} -f -L -o "${download_tmp}/kubectl" "${version_url}" || log 'error' 'Tarball download failed';
log 'info' "Downloading SHA hash file from ${version_url}.sha256";
curlw -s -f -L -o "${download_tmp}/${shasums_name}" "${version_url}.sha256" || log 'error' 'SHA256 hash download failed';

download_signature() {
  log 'info' "Downloading SHA hash signature file from ${shasum_url}";
  curlw -s -f -L \
    -o "${download_tmp}/${shasums_sig}" \
    "${shasum_url}" \
    && log 'debug' "SHA256SUM signature file downloaded successfully to ${download_tmp}/${shasums_sig}" \
    || log 'error' 'SHA256SUM signature download failed';
};

# If on MacOS with Homebrew, use GNU grep
# This allows keybase login detection to work on Mac,
# and is required to be able to detect kubectl version
# from "required_version" setting in "*.tf" files
check_dependencies;

if [[ -n "${sha256sum_bin}" && -x "${sha256sum_bin}" ]]; then
  (
    cd "${download_tmp}";
    echo "$(cat kubectl.sha256) kubectl" | "${sha256sum_bin}" -c 
  ) || log 'error' 'SHA256 hash does not match!';
else
  # Lack of shasum deserves a proper warning
  log 'warn' 'No shasum tool available. Skipping SHA256 hash validation';
fi;

mkdir -p "${dst_path}" || log 'error' "Failed to make directory ${dst_path}";

declare move_output;
move_output="$(cp "${download_tmp}/kubectl" "${dst_path}/")" || log 'error' 'Installing file failed';
while IFS= read -r move_output; do
 log 'info' "${move_output}";
done < <(printf '%s\n' "${move_output}");

declare perms_output;
perms_output="$(chmod +x "${dst_path}/kubectl")" || log 'error' 'Failed to make file executable';
while IFS= read -r perms_output; do
 log 'info' "${perms_output}";
done < <(printf '%s\n' "${perms_output}");

log 'info' "Installation of kubectl v${version} successful. To make this your default version, run 'kctlenv use ${version}'";
