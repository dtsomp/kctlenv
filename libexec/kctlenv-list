#!/usr/bin/env bash

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${KCTLENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine KCTLENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine KCTLENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  KCTLENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n "${KCTLENV_ROOT}" ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine KCTLENV_ROOT";
else
  KCTLENV_ROOT="${KCTLENV_ROOT%/}";
fi;
export KCTLENV_ROOT;

if [ -n "${KCTLENV_HELPERS:-""}" ]; then
  log 'debug' 'KCTLENV_HELPERS is set, not sourcing helpers again';
else
  [ "${KCTLENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${KCTLENV_ROOT}/lib/helpers.sh";
  if source "${KCTLENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${KCTLENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${KCTLENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${KCTLENV_ROOT}/${dir}', not adding it again";;
    *)
      log 'debug' "\$PATH does not contain '${KCTLENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${KCTLENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -ne 0 ] \
  && log 'error' "usage: kctlenv list";

[ -d "${KCTLENV_CONFIG_DIR}/versions" ] \
  || log 'error' 'No versions available. Please install one with: kctlenv install';

[[ -x "${KCTLENV_CONFIG_DIR}/versions" && -r "${KCTLENV_CONFIG_DIR}/versions" ]] \
  || log 'error' "kctlenv versions directory is inaccessible: ${KCTLENV_CONFIG_DIR}/versions";

version_name="$(kctlenv-version-name 2>/dev/null || true)" \
  && log 'debug' "kctlenv-version-name reported: ${version_name}";
export version_name;

if [ -z "${KCTLENV_KUBECTL_VERSION:-""}" ]; then
  version_source="$(kctlenv-version-file)" \
    && log 'debug' "kctlenv-version-file reported: ${version_source}" \
    || log 'error' "kctlenv-version-file failed";
else
  version_source='KCTLENV_KUBECTL_VERSION';
fi;
export version_source;

# Register for whether a default kubectl version has yet been set
declare -i default_set=0;

print_version () {
  if [ "${1}" == "${version_name}" ]; then
    echo "* ${1} (set by ${version_source})";
    default_set=1;
  else
    echo "  ${1}";
  fi;
};

log 'debug' 'Listing versions...';
local_versions=($(\find "${KCTLENV_CONFIG_DIR}/versions/" -type d -exec basename {} \; \
  | tail -n +2 \
  | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3));

log 'debug' "Local versions: ${local_versions[@]}";

log 'debug' 'Printing versions...';
for local_version in ${local_versions[@]}; do
  print_version "${local_version}";
done;

[ "${default_set}" -eq 0 ] && log 'info' "No default set. Set with 'kctlenv use <version>'";

exit 0;
